declare i32 @getint()
declare i32 @getch()
declare void @putint(i32)
declare void @putch(i32)
define i32 @main(){
	%1 = alloca i32
	%2 = alloca i32
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	store i32 5, i32* %1
	store i32 5, i32* %2
	%6 = sub i32 0, 2
	store i32 %6, i32* %4
	store i32 2, i32* %5
	%7 = load i32, i32* %1
	%8 = load i32, i32* %2
	%9 = add i32 %7, %8
	%10 = load i32, i32* %3
	%11 = add i32 %9, %10
	%12 = load i32, i32* %4
	%13 = add i32 %11, %12
	%14 = icmp eq i32 %13, 10
	%15 = zext i1 %14 to i32
	%16 = icmp ne i32 %15, 0
	br i1 %16, label %l2, label %l3
  l2:
	%17 = load i32, i32* %5
	%18 = add i32 %17, 1
	store i32 %18, i32* %5
	br label %l1
  l3:
	%19 = load i32, i32* %1
	%20 = load i32, i32* %2
	%21 = add i32 %19, %20
	%22 = load i32, i32* %3
	%23 = add i32 %21, %22
	%24 = load i32, i32* %4
	%25 = add i32 %23, %24
	%26 = icmp eq i32 %25, 8
	%27 = zext i1 %26 to i32
	%28 = icmp ne i32 %27, 0
	br i1 %28, label %l5, label %l6
  l5:
	%29 = load i32, i32* %5
	%30 = add i32 %29, 2
	store i32 %30, i32* %5
	br label %l4
  l6:
	%31 = load i32, i32* %5
	%32 = add i32 %31, 4
	store i32 %32, i32* %5
	br label %l4
  l4:
	br label %l1
  l1:
		%33 = load i32, i32* %5
call void @putint(i32 %33)
	ret i32 0
}
